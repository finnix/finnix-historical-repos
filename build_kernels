#!/bin/sh

set -e
set -x

# build/install
COMMAND="$1"

if [ -z "${CURDIR}" ]; then
  echo "CURDIR is required" >&2; exit 1
elif [ -z "${DEB_BUILD_ARCH}" ]; then
  echo "DEB_BUILD_ARCH is required" >&2; exit 1
fi
if [ "${COMMAND}" = "install" -a -z "${DESTDIR}" ]; then
  echo "DESTDIR is required" >&2; exit 1
fi

# Read VERSION and EXTRAVERSION
. "${CURDIR}/configs/build_kernels.config"

# Handle 3.N kernels
case "${VERSION}" in
3.*)
  VERSION="${VERSION}.0"
  MAKE_SUBLEVEL_DEF="SUBLEVEL=0"
  ;;
2.6.*)
  MAKE_SUBLEVEL_DEF=""
  ;;
*)
  echo "2.6.N or 3.N kernels only" >&2
  exit 1
  ;;
esac

process_command() {
  case "${COMMAND}" in
  build)
    build_arch
    ;;
  install)
    install_arch
    ;;
  *)
    echo "Unknown command ${COMMAND}" >&2
    exit 1
    ;;
  esac
}

build_arch() {
  rm -rf "${CURDIR}/build/${VERSION}${KERNEL_EXTRAVERSION}"
  mkdir -p "${CURDIR}/build/${VERSION}${KERNEL_EXTRAVERSION}"
  cd "${CURDIR}/build/${VERSION}${KERNEL_EXTRAVERSION}"

  # Extract sources
  for i in `cat "${CURDIR}/sources/series"`; do
    tar -ax --strip-components=1 -f "${CURDIR}/sources/$i"
  done

  # Apply patches
  for i in `cat "${CURDIR}/patches/series"`; do
    patch -p1 <"${CURDIR}/patches/$i"
  done

  # No concurrency by default
  [ -z "$KERNEL_JOBS" ] && KERNEL_JOBS=1

  # Move config in
  cp "${CURDIR}/configs/config-${VERSION}${KERNEL_EXTRAVERSION}" .config
  make ${MAKE_SUBLEVEL_DEF} EXTRAVERSION="${KERNEL_EXTRAVERSION}" ARCH="${KERNEL_MAKE_ARCH}" oldconfig

  # Main make
  make -j${KERNEL_JOBS} ${MAKE_SUBLEVEL_DEF} EXTRAVERSION="${KERNEL_EXTRAVERSION}" ARCH="${KERNEL_MAKE_ARCH}"

  # Clean up
  cd "${CURDIR}"
}

install_arch() {
  cd "${CURDIR}/build/${VERSION}${KERNEL_EXTRAVERSION}"

  # Install modules
  mkdir -p "${DESTDIR}/lib/modules"
  make ${MAKE_SUBLEVEL_DEF} EXTRAVERSION="${KERNEL_EXTRAVERSION}" ARCH="${KERNEL_MAKE_ARCH}" INSTALL_MOD_PATH="${DESTDIR}" modules_install
  find "${DESTDIR}/lib/modules/${VERSION}${KERNEL_EXTRAVERSION}" -name '*.ko' -print0 | xargs -0 strip -x -R .note -R .comment
  rm -f "${DESTDIR}/lib/modules/${VERSION}${KERNEL_EXTRAVERSION}/build"
  rm -f "${DESTDIR}/lib/modules/${VERSION}${KERNEL_EXTRAVERSION}/source"

  # Install kernel
  mkdir -p "${DESTDIR}/boot"
  cp System.map "${DESTDIR}/boot/System.map-${VERSION}${KERNEL_EXTRAVERSION}"
  cp .config "${DESTDIR}/boot/config-${VERSION}${KERNEL_EXTRAVERSION}"
  case "${DEB_BUILD_ARCH}" in
  i386)
    case "${FINNIX_ARCH}" in
    x86)
      cp arch/x86/boot/bzImage "${DESTDIR}/boot/linux"
      ;;
    amd64)
      cp arch/x86/boot/bzImage "${DESTDIR}/boot/linux64"
      ;;
    esac
    ;;
  amd64)
    cp arch/x86/boot/bzImage "${DESTDIR}/boot/linux"
    ;;
  powerpc)
    case "${FINNIX_ARCH}" in
    ppc)
      cp vmlinux "${DESTDIR}/boot/linux"
      strip "${DESTDIR}/boot/linux"
      ;;
    ppc64)
      cp vmlinux "${DESTDIR}/boot/linux64"
      strip "${DESTDIR}/boot/linux64"
      ;;
    esac
    ;;
  armhf)
    cp arch/arm/boot/zImage "${DESTDIR}/boot/linux"
    ;;
  esac

  # Clean up
  cd "${CURDIR}"
}

case "${DEB_BUILD_ARCH}" in
i386)
  FINNIX_ARCH="amd64"
  KERNEL_MAKE_ARCH="x86_64"
  KERNEL_EXTRAVERSION="${EXTRAVERSION}-${FINNIX_ARCH}-finnix"
  process_command
  FINNIX_ARCH="x86"
  KERNEL_MAKE_ARCH="i386"
  KERNEL_EXTRAVERSION="${EXTRAVERSION}-${FINNIX_ARCH}-finnix"
  process_command
  ;;
amd64)
  FINNIX_ARCH="amd64"
  KERNEL_MAKE_ARCH="x86_64"
  KERNEL_EXTRAVERSION="${EXTRAVERSION}-${FINNIX_ARCH}-finnix"
  process_command
  ;;
powerpc)
  FINNIX_ARCH="ppc64"
  KERNEL_MAKE_ARCH="powerpc"
  KERNEL_EXTRAVERSION="${EXTRAVERSION}-${FINNIX_ARCH}-finnix"
  process_command
  FINNIX_ARCH="ppc"
  KERNEL_MAKE_ARCH="powerpc"
  KERNEL_EXTRAVERSION="${EXTRAVERSION}-${FINNIX_ARCH}-finnix"
  process_command
  ;;
armhf)
  FINNIX_ARCH="armhf"
  KERNEL_MAKE_ARCH="arm"
  KERNEL_EXTRAVERSION="${EXTRAVERSION}-${FINNIX_ARCH}-finnix"
  process_command
  ;;
*)
  echo "Unknown architecture ${DEB_BUILD_ARCH}" >&2
  exit 1
  ;;
esac
