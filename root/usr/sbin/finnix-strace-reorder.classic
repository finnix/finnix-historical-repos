#!/usr/bin/perl

# finnix-strace-reorder.classic
# Copyright (C) 2011 Ryan Finnie
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use File::Basename;
use Cwd qw/abs_path/;

$i = 0;
while($linein = <STDIN>) {
  if($linein =~ /^\d+\s+(open|stat64|execve)\(\"(.*?)\".*?\) = ([-\d]+)/) {
    $type = $1;
    $file = $2;
    $fd = $3;
    next if $fd eq "-1";
    $file = abs_path($file);
    next unless $file =~ /^\/UNIONFS\//;
    next if $file =~ /^\/UNIONFS\/dev\/hd/;
    next if $file =~ /^\/UNIONFS\/dev\/sd/;
    next if (-d $file);
    $i++;
    if(-e $file) {
      unless($found{$file}) {
        push(@list, $file)
      }
      $found{$file}++;
      $foundat{$file} = $i;
    }
    if($file =~ /^\/UNIONFS\/lib\/modules\/(.*?-\d+)-(.*?)-finnix\/(.*?)$/) {
      $kverp = $1;
      $karchp = $2;
      $krestp = $3;
      if(($karchp eq "ppc") || ($karchp eq "ppc64")) {
        $knewarchp = (($karchp eq "ppc") ? "ppc64" : "ppc");
      } elsif(($karchp eq "x86") || ($karchp eq "amd64")) {
        $knewarchp = (($karchp eq "x86") ? "amd64" : "x86");
      } else {
print STDERR "hai $karchp\n";
        next;
      }
      $file = "/UNIONFS/lib/modules/$kverp-$knewarchp-finnix/$krestp";
      if(-e $file) {
        unless($found{$file}) {
          push(@list, $file)
        }
        $found{$file}++;
        $foundat{$file} = $i;
      }
    }
  }
}
$totalfound = $i;

foreach $file (@list) {
  $score = $found{$file} + ($totalfound - $foundat{$file});
  $file =~ s/^\/UNIONFS//;
  $file =~ s/^\///;
  print "$file\t$score\n";
  #print "$score\t$file\n";
}

