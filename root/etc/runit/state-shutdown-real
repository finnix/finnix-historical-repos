#!/bin/bash

# Note: While the shebang says /bin/bash, this script must be written to
# also be run as a busybox ash script (a small superset of POSIX shell).
# The only reason it's not /bin/sh is because of "read -t", which is
# supported in bash and ash, but not POSIX shell.

# state-shutdown-real
# Copyright (C) 2013 Ryan Finnie
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

PATH=/bin:/sbin:/usr/bin:/usr/sbin

. /lib/finnix/finnix-rc-helper.sh

waitdot() {
  local RUNFOR="$1"
  while [ ${RUNFOR} -gt 0 ]; do
    echo -n "."
    sleep 1
    RUNFOR=$(($RUNFOR-1))
  done
}

# Run a shell if in debug mode
rundebugshell() {
  echo "${BLUEITEM} Starting debug shell."
  echo "${BLUEITEM} Type \"exit\" to continue."
  _f12 which bash && bash || sh
}

# Let's see if we can get rid of that "INIT:" message
echo -n "${CRE}${ESC}[1A${CRE}"
echo -n "${CRE}${ESC}[1A${CRE}"
echo

# Disable kernel messages
[ "${FINNIX_DEBUG}" = "no" ] && echo "0" > /proc/sys/kernel/printk

if [ -x /etc/runit/reboot ]; then
  RUNLEVEL=6
  message="Rebooting"
  message2="reboot"
  command="reboot"
  options="-f -n"
else
  RUNLEVEL=0
  message="Shutting down"
  message2="shut down"
  command="poweroff"
  options="-f -n"
fi

export RUNLEVEL

cd /

# Clean input/output
exec >/dev/console 2>&1 </dev/console

echo -n "${BLUEITEM} Stopping supervised services..."

# Interactive shells ignore most signals except HUP, so handle
# them specially
_f12 sv down /lib/finnix/service/running/getty-*
_f12 sv hup /lib/finnix/service/running/getty-*

# Stop remaining runit services
_f12 sv shutdown /lib/finnix/service/running/*

echo -n " done${CRE}"

# Execute "normal" rc-level shutdown scripts, if any
/etc/finnix/init.d/rc $RUNLEVEL

[ "${FINNIX_DEBUG}" = "yes" ] && rundebugshell

# udev is being too "smart" for its own good
FOUND_CDROM="$(awk '$2 == "/cdrom" { print $1 }' </proc/mounts)"
if [ -n "$FOUND_CDROM" ]; then
  if (
    eval `_f2 /lib/udev/cdrom_id $FOUND_CDROM`
    [ "$ID_CDROM" = "1" ] || exit 1
  ); then
    _f12 /lib/udev/cdrom_id --unlock-media $FOUND_CDROM
  fi
fi

# Now kill them all
echo -n "${BLUEITEM} Stopping remaining processes"
killall5 -15
waitdot 4
killall5 -9
waitdot 1
echo -n " done${CRE}"

# Umount devpts early (otherwise UNIONFS may stay busy)
_f12 umount -t devpts -a

# turn off swap, then unmount file systems.
echo -n "${BLUEITEM} Turning off swap... "
_f12 swapoff -a
echo -n "done${CRE}"

if [ "${FINNIX_NOEJECT}" = "no" ]; then
  # Turn on autoeject of CD-Roms
  for dev in /proc/sys/dev/cdrom*/lock; do [ -f "$dev" ] && echo 0 > "$dev"; done
  for dev in /proc/sys/dev/cdrom*/autoeject; do [ -f "$dev" ] && echo 1 > "$dev"; done
fi

# Now umount everything but root
echo -n "${BLUEITEM} Unmounting remaining file systems... "

if [ -x /busybin/sh ]; then
  # BusyBox can't supply everything, so let's leave some utils on the ramdisk
  PATH=/busybin
  hash -r

  # If /dev is a symlink, assume it's pointing to a directory on a union
  if [ -h /dev ]; then
    # We'll need a few dev entries...
    rm /dev
    mkdir -p /dev
    mount -n -t devtmpfs none /dev
    exec >/dev/console 2>&1 </dev/console
  fi

  # Get rid of unionfs and its written files
  _f12 umount -drfl /UNIONFS
  _f12 rm -rf /tmp/UNIONFS

  # Get rid of the compressed root filesystem
  _f12 umount -drfl /FINNIX

  # Now we should be able to umount the rest.
  for mount in $(awk '$3 !~ "^(tmpfs|sysfs|proc)$" { print $2 }' /proc/mounts); do
    _f12 umount -drfl "$mount"
  done
else
  # umount everything we can, everything else is ro
  for mount in $(awk '$3 !~ "^(tmpfs|sysfs|proc)$" { print $2 }' /proc/mounts); do
    _f12 umount -dr "$mount"
  done
fi

# Remove remaining unused modules
_f12 rmmod -a

echo -n "done${CRE}"

# Sync the buffers and disable CAD init handling in preparation for reboot countdown
# (Yes, I'm old school and still sync twice)
sync; sync;
[ -e /proc/sys/kernel/ctrl-alt-del ] && echo 1 >/proc/sys/kernel/ctrl-alt-del

# Thank you, you've been a great audience.
echo "${CRE}${BLUEITEM} It is now safe to shut down/reboot."
for i in 10 9 8 7 6 5 4 3 2 1; do
  echo -n "${CRE}${BLUEITEM} $message in $i (or press ENTER to $message2 immediately)..."
  # Give the user an opportunity to press Enter to immediately shut
  # down/reboot, or "d" to get to the debug shell.
  if read -t 1 -n 1 READCMD; then
    echo -n "${CRE}"
    if [ -z "$READCMD" ]; then
      break
    elif [ "$READCMD" = "d" ]; then
      FINNIX_DEBUG="yes"
      break
    fi
  fi
done

[ "${FINNIX_DEBUG}" = "yes" ] && rundebugshell
echo "${CRE}${BLUEITEM} $message..."
exec $command $options
