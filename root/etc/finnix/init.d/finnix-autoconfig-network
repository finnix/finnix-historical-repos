#!/bin/sh

### BEGIN INIT INFO
# Provides:          finnix-autoconfig-network
# Required-Start:    $local_fs
# Required-Stop:
# Default-Start:     S
# Default-Stop:
# Shoft-Description: Finnix network setup
### END INIT INFO

# finnix-autoconfig-network
# Copyright (C) 2012 Ryan Finnie
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

PATH="/bin:/sbin:/usr/bin:/usr/sbin"
export PATH

umask 022

case "$1" in
  start) ;;
  stop|restart|force-reload) exit 0 ;;
  *) echo "Usage: $0 {start|stop|restart|force-reload}" >&2; exit 1 ;;
esac

. /lib/finnix/finnix-rc-helper.sh

# Bring up loopback interface now
ifconfig lo 127.0.0.1 up

# Configure interfaces (static or DHCP)
if [ "$FINNIX_NFSBOOT" = "yes" ] || [ "$FINNIX_FORENSIC" = "yes" ]; then
  exit 0
fi

IP_INT="$(getbootparam ip_int)"
arr=$(echo "$IP_INT" | tr "," "\n")
if [ "$arr" = "all" ] || [ -z "$arr" ]; then
  arr="$(_f2 awk -F: '/eth.:|tr.:/{print $1}' /proc/net/dev)"
fi
for i in $arr; do
  IP_V4DHCP="$(getbootparam ip_${i}_v4dhcp)"
  IP_V4ADDR="$(getbootparam ip_${i}_v4addr)"
  IP_V4NETMASK="$(getbootparam ip_${i}_v4netmask)"
  IP_V4GATEWAY="$(getbootparam ip_v4gateway)"
  IP_V6ADDR="$(getbootparam ip_${i}_v6addr)"
  IP_V6GATEWAY="$(getbootparam ip_v6gateway)"
  IP_DNS="$(getbootparam ip_dns)"
  IP_DOMAIN="$(getbootparam ip_domain)"
  IP_SEARCH="$(getbootparam ip_search)"
  if [ "$IP_V4DHCP" = "yes" ] || [ -z "${IP_V4ADDR}${IP_V6ADDR}" ]; then
    if ! checkbootparam "nodhcp"; then
      echo -n "${BLUEITEM} Starting background DHCP request: "
      echo -n "${WHITE}$DEVICE${NORMAL} "
      #_f12 ifconfig $DEVICE up
      dhclient -v "${i}" >>/var/log/dhclient."${i}".log 2>&1 &
      echo -n "done${CRE}"
    fi
  else
    if [ -n "$IP_V4ADDR" ]; then
      [ -z "$IP_V4NETMASK" ] && IP_V4NETMASK="255.255.255.0"
      ifconfig "${i}" "$IP_V4ADDR" netmask "$IP_V4NETMASK"
    fi
  fi
  if [ -n "$IP_V6ADDR" ]; then
    ip -6 addr add "$IP_V6ADDR" dev "${i}"
  fi
done
if [ -n "$IP_V4GATEWAY" ]; then
  route add default gw "$IP_V4GATEWAY"
fi
if [ -n "$IP_V6GATEWAY" ]; then
  ip -6 route add default via "$IP_V6GATEWAY"
fi
if [ -n "$IP_DNS" ]; then
  : >/etc/resolv.conf
  arr=$(echo "$IP_DNS" | tr "," "\n")
  for i in $arr; do
    echo "nameserver $i" >>/etc/resolv.conf
  done
fi
if [ -n "$IP_SEARCH" ]; then
  arr=$(echo "$IP_SEARCH" | tr "," "\n")
  for i in $arr; do
    echo "search $i" >>/etc/resolv.conf
  done
elif [ -n "$IP_DOMAIN" ]; then
  echo "domain $IP_DOMAIN"  >>/etc/resolv.conf
fi
