#!/bin/sh
#
# Finnix General Startup Script
# (C) Ryan Finnie <ryan@finnie.org>
# Portions (C) Klaus Knopper <knoppix@knopper.net>

### BEGIN FUNCTIONS ####

# Filter stdout/stderr, unless debug mode is on
_f12() {
  if [ "${FINNIX_DEBUG}" = "yes" ]; then
    "$@"
  else
    "$@" >/dev/null 2>/dev/null
  fi
}

# Filter stderr, unless debug mode is on
_f2() {
  if [ "${FINNIX_DEBUG}" = "yes" ]; then
    "$@"
  else
    "$@" 2>/dev/null
  fi
}

# Loop through discovered block devices, look for a
# Finnix signature
mountblindly() {
  DEVICES="$USERROOT"
  for i in $(_f2 find /sys/block -follow -maxdepth 3 -name dev); do
    dev="$(basename $(dirname $i) | sed 's/!/\//g')"
    case "$dev" in
      fd*) continue;;
      loop*) continue;;
      ram*) continue;;
      nbd*) continue;;
      *) DEVICES="$DEVICES /dev/$dev";;
    esac
  done
  for i in $DEVICES; do
    test -e "$i" || continue
    dispdev=$(basename "$i")
    echo -n "${CRE}${BLUEITEM} Looking for ${OS_NAME} media at ${WHITE}$dispdev${NORMAL}... "
    if finnix_testmount $i; then
      echo "${CRE}${BLUEITEM} ${OS_NAME} media found at ${WHITE}$dispdev${NORMAL}"
      FOUND_FINNIX="yes"
      FINNIX_DEV="$i"
      break
    fi
  done
}

# Mount a device, look for a Finnix signature
finnix_testmount() {
  # Usage: finnix_testmount dev
  dev="$1"
  if ! test -b $dev; then
    return 1
  fi
  if [ "$FINNIX_FORENSIC" = "yes" ]; then
    mounttypes="-t ext2,iso9660,vfat,squashfs"
    if [ "$(blockdev --getro $dev)" = "0" ]; then
      blockdev --setro $dev
    fi
  else
    mounttypes=""
  fi

  mkdir -p /tmp/testmount
  if [ -n "${FINNIX_FINDISO}" ]; then
    mkdir -p /tmp/testmount_findisobacking
    if ! _f12 mount -n $mounttypes -o ro $dev "/tmp/testmount_findisobacking"; then
      return 1
    fi
    if ! [ -f "/tmp/testmount_findisobacking${FINNIX_FINDISO}" ]; then
      umount "/tmp/testmount_findisobacking"
      return 1
    fi
    mkdir -p "/tmp/testmount"
    if ! _f12 mount $mounttypes -o ro,loop "/tmp/testmount_findisobacking${FINNIX_FINDISO}" "/tmp/testmount"; then
      umount "/tmp/testmount_findisobacking"
      return 1
    fi
  else
    if ! _f12 mount -n $mounttypes -o ro $dev "/tmp/testmount"; then
      return 1
    fi
  fi

  ret=1
  if test -f "/tmp/testmount$CDDISTID" && check_distid "/tmp/testmount$CDDISTID" "$INITDISTIDS"; then
    ret=0
  fi

  [ -n "${FINNIX_FINDISO}" ] && umount -d "/tmp/testmount_findisobacking"
  umount /tmp/testmount
  return $ret
}

# Simple shell grep
stringinfile() {
  case "$(cat $2)" in *$1*) return 0;; esac
  return 1
}

# Same for strings
stringinstring() {
  case "$2" in *$1*) return 0;; esac
  return 1
}

# Reread boot command line; echo last parameter's argument or return false.
getbootparam() {
  stringinstring " $1=" "randomstring $CMDLINE randomstring" || return 1
  result="${CMDLINE##*$1=} randomstring"
  # Note: the second whitespace is a tab
  result="${result%%[ 	]*}"
  echo "$result"
  return 0
}

# Check boot commandline for specified option
checkbootparam() {
  stringinstring " $1 " "randomstring $CMDLINE randomstring"
  return "$?"
}

# See if a dist.id file contains an allowed ID
check_distid() {
  CHECK_DISTIDFILE="$1"
  ALLOWED_DISTIDS="$2"
  while read ID REST; do
    [ -z "$ID" ] && continue
    for CHECKID in $ALLOWED_DISTIDS; do
      [ "$ID" = "$CHECKID" ] && return 0
    done
  done <<EOM
$(egrep -v '^#' "${CHECK_DISTIDFILE}")
EOM
  return 1
}

# Run a shell if in debug mode
rundebugshell() {
  echo "${BLUEITEM} Starting debug shell."
  echo "${BLUEITEM} Type \"exit\" to continue."
  # Allow signals
  [ "${FINNIX_DEBUG}" = "no" ] && trap 1 2 3 15
  [ "${FINNIX_DEBUG}" = "no" ] && echo "6" > /proc/sys/kernel/printk
  _f12 which bash && bash || ash
  # Don't allow interrupt signals
  [ "${FINNIX_DEBUG}" = "no" ] && echo "0" > /proc/sys/kernel/printk
  [ "${FINNIX_DEBUG}" = "no" ] && trap "" 1 2 3 15
}

# Emergency shell for failures
runemergencyshell() {
  echo
  echo "${REDITEM} Dropping you to a BusyBox shell."
  echo "${REDITEM} Press reset button to quit."
  PS1="finnix# "
  export PS1
  [ "${FINNIX_DEBUG}" = "no" ] && echo "6" > /proc/sys/kernel/printk
  # Allow signals
  [ "${FINNIX_DEBUG}" = "no" ] && trap 1 2 3 15
  exec /bin/ash
}

### END FUNCTIONS ####

# Everything in /bin is a link to busybox
PATH="/bin"
export PATH

umask 022

# Mount /proc
_f12 mount -n -t proc none /proc

# Mount /sys
_f12 mount -n -t sysfs none /sys

# Mount /dev
_f12 mount -n -t devtmpfs none /dev

# Get arch
ARCH="$(uname -m)"

# Read boot command line with builtin cat command
CMDLINE="$(cat /proc/cmdline)"

# Clean input/output
exec >/dev/console </dev/console 2>&1

# 2010-10: Get around kernel bug. If a framebuffer mode is specified,
# the screen goes white, and is slowly replaced by white-on-black text.
# A reset masks this.  We only want to do it if "quiet" though.
VGAMODE="$(getbootparam vga)"
[ "$VGAMODE" = "normal" ] && VGAMODE=""
[ -z "$VGAMODE" ] && checkbootparam quiet && reset

for i in OS_NAME OS_VERSION OS_VERSION_ID; do
  read "$i"
done <<EOM
$(
  . /etc/os-release
  echo "$NAME"
  echo "$VERSION"
  echo "$VERSION_ID"
)
EOM
. /bin/finnix-colors.sh

echo ""
if [ "${OS_VERSION_ID}" = "dev" ]; then
  echo "${WHITE}Welcome to ${BLUE}${OS_NAME}${WHITE} ${RED}${OS_VERSION}${WHITE}!${NORMAL}"
else
  echo "${WHITE}Welcome to ${BLUE}${OS_NAME}${WHITE}!${NORMAL}"
fi
echo ""

FINNIX_DEBUG="no"
checkbootparam debug && FINNIX_DEBUG="yes"
checkbootparam umldebug && FINNIX_DEBUG="yes"
checkbootparam usbhid && USBHID="yes"
checkbootparam toram && TORAM="yes"
checkbootparam testcd && TESTCD="yes"
FINNIX_NOEJECT="no"
checkbootparam noeject && FINNIX_NOEJECT="yes"
checkbootparam noboothwsetup && NOBOOTHWSETUP="yes"
checkbootparam nodma && NODMA="yes"
ROOTWRITE="ro"
checkbootparam rw && ROOTWRITE="rw"
checkbootparam bootchart && BOOTCHART="yes"
FINNIX_FORENSIC="no"
checkbootparam forensic && FINNIX_FORENSIC="yes"
checkbootparam forensics && FINNIX_FORENSIC="yes"
[ "$FINNIX_FORENSIC" = "yes" ] && ROOTWRITE="ro"
INIT="$(getbootparam init)"
[ -z $INIT ] && INIT=/sbin/init
checkbootparam strace && FINNIX_STRACE="yes"

if [ "$FINNIX_FORENSIC" = "yes" ]; then
  echo "${BLUEITEM} ${WHITE}Forensic mode${NORMAL} is active"
fi

FINNIX_XEN="no"
FINNIX_XENU="no"
FINNIX_XENU_OLD="no"
FINNIX_XENU_NEW="no"
FINNIX_UML="no"
# We'll need to differentiate between UML and Xen (xenU)
_f12 grep "User Mode Linux" /proc/cpuinfo && FINNIX_UML="yes"
if [ -d /proc/xen ]; then
  FINNIX_XEN="yes"
  MOUNTED_XENFS="no"
  _f12 modprobe xenfs
  if grep -q xenfs /proc/filesystems; then
    _f12 mount -t xenfs xenfs /proc/xen && MOUNTED_XENFS="yes"
  fi
  if [ -e /proc/xen/capabilities ]; then
    grep -q "control_d" /proc/xen/capabilities || FINNIX_XENU="yes"
  fi
  [ "${FINNIX_XENU}" = "yes" ] && FINNIX_XENU_NEW="yes"
  [ "$MOUNTED_XENFS" = "yes" ] && _f12 umount /proc/xen
fi

# Line clearing screws up readability in debug mode
[ "${FINNIX_DEBUG}" = "yes" ] && CRE="
"

# Don't allow interrupt signals
[ "${FINNIX_DEBUG}" = "no" ] && trap "" 1 2 3 15

# Disable kernel messages while probing modules in autodetect mode
[ "${FINNIX_DEBUG}" = "no" ] && echo "0" > /proc/sys/kernel/printk

USERFINNIXDIR="$(getbootparam finnixdir)"
if [ -n "$USERFINNIXDIR" ]; then
  FINNIX_DIR="$USERFINNIXDIR"
else
  FINNIX_DIR="/finnix"
fi
ARCHMAP="${FINNIX_DIR}/arch.map"
CDDISTID="${FINNIX_DIR}/dist.id"

USERROOT="$(getbootparam root)"
FINNIX_FINDISO="$(getbootparam findiso)"

# Read the initrd dist IDs
INITDISTIDS=""
while read ID REST; do
  [ -n "$INITDISTIDS" ] && INITDISTIDS="$INITDISTIDS "
  INITDISTIDS="$INITDISTIDS$ID"
done <<EOM
$(egrep -v '^#' "/etc/dist.id")
EOM

# If the user needs to get keyboard access ASAP on a USB system...
if [ -n "${USBHID}" ]; then
  for modname in ohci-hcd uhci-hcd ehci-hcd usbhid; do
    echo -n "${CRE}${BLUEITEM} Loading emergency USB HID module: ${WHITE}$modname${NORMAL}"
    _f12 modprobe $modname
  done
  echo -n "${CRE}"
fi

[ "${FINNIX_DEBUG}" = "yes" ] && rundebugshell

# Normally these are built into the Finnix kernel,
# but it doesn't hurt to try anyway.
for i in isofs nls_cp437 nls_utf8 vfat ext2 loop squashfs overlay; do
  _f12 modprobe $i
done

# tmpfs with variable ramdisk size.
# We check for available memory anyway and limit the ramdisks
# to a reasonable size.
FOUNDMEM="$(awk '/MemTotal/{print $2}' /proc/meminfo)"

# Set up zram on low-memory systems
if [ $FOUNDMEM -lt 131072 ]; then
  if checkbootparam nozram; then
    USE_ZRAM=no
  else
    USE_ZRAM=yes
  fi
else
  if checkbootparam zram; then
    USE_ZRAM=yes
  else
    USE_ZRAM=no
  fi
fi
if [ "$USE_ZRAM" = "yes" ]; then
  if _f12 modprobe zram; then
    if [ $FOUNDMEM -lt 131072 ]; then
      echo "${BLUEITEM} Low memory system detected, enabling zram RAM compression"
    else
      echo "${BLUEITEM} Enabling zram RAM compression"
    fi
    echo $(expr $FOUNDMEM \* 1024) >/sys/block/zram0/disksize
    if ! [ -b /dev/zram0 ]; then
      mknod /dev/zram0 b $(sed 's/:/ /' /sys/block/zram0/dev)
    fi
    _f12 mkswap /dev/zram0
    _f12 swapon -p 100 /dev/zram0
  fi
fi

# Current free memory, used to determine how big to make the ramdisk
FREEMEM="$(awk 'BEGIN{m=0};/MemFree|Cached/{m+=$2};END{print m}' /proc/meminfo)"

# Never use more than 80% of the RAM available at this point
# Dividing first because 32GiB will roll over the multiplication past 32 bit signed (thanks linproknan)
RAMSIZE=$(expr $FREEMEM / 10 \* 8)

# Remainder math to make pretty memory output
FOUNDMEM_M=$(expr $FOUNDMEM / 1024)
if [ $FOUNDMEM_M -lt 192 ]; then
  FOUNDMEM_R=$(expr $(expr $FOUNDMEM - $(expr $FOUNDMEM_M \* 1024)) / 1024 \* 10)
  FOUNDMEM_M="$FOUNDMEM_M.$FOUNDMEM_R"
fi
RAMSIZE_M=$(expr $RAMSIZE / 1024)
if [ $RAMSIZE_M -lt 192 ]; then
  RAMSIZE_R=$(expr $(expr $RAMSIZE - $(expr $RAMSIZE_M \* 1024)) / 1024 \* 10)
  RAMSIZE_M="$RAMSIZE_M.$RAMSIZE_R"
fi

echo "${BLUEITEM} Total memory: ${WHITE}${FOUNDMEM_M}MiB${NORMAL}, shared ramdisk: ${WHITE}${RAMSIZE_M}MiB${NORMAL}"

echo -n "${BLUEITEM} Setting up ramdisk... "
mkdir -p /media/ramdisk
mount -n -t tmpfs -o "size=${RAMSIZE}k" tmpfs /media/ramdisk
echo -n "done${CRE}"

# Hardware module loading
if [ -n "${NODMA}" ]; then
  modprobe libata dma=0
fi
if [ -z "${NOBOOTHWSETUP}" ]; then
  echo -n "${CRE}${BLUEITEM} Loading probed module: "

  LOADMODS="$(sysmodules) ide-generic generic"
  if [ "${FINNIX_XENU}" = "yes" ]; then
    LOADMODS="$LOADMODS xen-blkfront xen-netfront"
  fi
  if [ "${ARCH}" = "armv7l" ]; then
    LOADMODS="$LOADMODS mmci sdhci virtio_mmio sdhci-esdhc-imx ahci_imx"
  fi
  for modname in $LOADMODS; do
    echo -n "${CRE}${BLUEITEM} Loading probed module: ${WHITE}$modname${NORMAL}"
    _f12 modprobe $modname
  done

  MOREMODS=""
  [ -e /sys/bus/ide ] && MOREMODS="${MOREMODS} ide-cd ide-disk"
  [ -e /sys/bus/usb ] && MOREMODS="${MOREMODS} usb-storage usbhid"
  [ -e /sys/bus/virtio ] && MOREMODS="${MOREMODS} virtio_blk"
  [ -e /sys/bus/ieee1394 ] && MOREMODS="${MOREMODS} firewire-sbp2"
  [ -e /sys/bus/usb -o -e /sys/bus/ieee1394 -o -e /sys/bus/scsi ] && MOREMODS="${MOREMODS} sr_mod sd_mod"

  for modname in ${MOREMODS}; do
    echo -n "${CRE}${BLUEITEM} Loading probed module: ${WHITE}$modname${NORMAL}"
    _f12 modprobe $modname
  done

  echo -n "${CRE}"
fi

if [ "${FINNIX_DEBUG}" = "yes" ]; then
  for dev in /proc/sys/dev/cdrom*/debug; do [ -f "$dev" ] && echo 1 > "$dev"; done
fi

# Let's begin looking for ourself!
FOUND_FINNIX=""

# Full CD on initrd
# Note: a skeleton /finnix layout can be placed in /cdroot as long as
# it has a proper arch.map file, and will be enough to boot.  However,
# it will not be recursively self-hosting.
# A full extracted CD copy can be placed in /cdroot and WILL be
# self-hosting.
# BEGIN INITRDROOT
if [ -e "/cdroot$CDDISTID" ] && check_distid "/cdroot$CDDISTID" "$INITDISTIDS"; then
  FINNIX_CDBASE="/media/ramdisk/cd_base"
  unset FINNIX_CDBASE_REMOUNT
  mkdir -p "${FINNIX_CDBASE}"
  cp -a /cdroot/* "${FINNIX_CDBASE}/"
  FOUND_FINNIX=yes

# ELSE INITRDROOT
else

# NFS BEGIN
NFSROOT="$(getbootparam nfsroot)"
FINNIX_NFSBOOT="no"
if [ -n "${NFSROOT}" ] && [ "${FINNIX_FORENSIC}" = "no" ]; then
  FINNIX_NFSBOOT="yes"
  FINNIX_CDBASE="/tmp/nfs"
  mkdir -p "$FINNIX_CDBASE"
  FINNIX_CDBASE_REMOUNT="/media/nfs/cd_base"

  NFSVERS="$(getbootparam nfsvers)"
  [ -z "${NFSVERS}" ] && NFSVERS="2"

  if [ "${ARCH}" = "ppc" -o "${ARCH}" = "ppc64" -o "${ARCH}" = "powerpc" ]; then
    # For some reason, libpci doesn't report/detect sungem devices correctly until the module is loaded
    echo -n "${CRE}${BLUEITEM} Loading probed module: ${WHITE}sungem${NORMAL}"
    _f12 modprobe sungem
    echo -n "${CRE}"
  fi

  ip -4 addr flush dev lo
  ip -6 addr flush dev lo
  ip -4 addr add 127.0.0.1/8 dev lo
  ip -6 addr add ::1/128 dev lo
  ip link set dev lo up
  IP_INT="$(getbootparam ip_int)"
  arr=$(echo "$IP_INT" | tr "," "\n")
  if [ "$arr" = "all" ] || [ -z "$arr" ]; then
    arr="$(awk -F: '/eth.:|tr.:/{print $1}' /proc/net/dev)"
  fi
  for i in $arr; do
    ip link set dev "${i}" up
    IP_V4DHCP="$(getbootparam ip_${i}_v4dhcp)"
    IP_V4ADDR="$(getbootparam ip_${i}_v4addr)"
    IP_V4NETMASK="$(getbootparam ip_${i}_v4netmask)"
    IP_V4GATEWAY="$(getbootparam ip_v4gateway)"
    IP_V6ADDR="$(getbootparam ip_${i}_v6addr)"
    IP_V6GATEWAY="$(getbootparam ip_v6gateway)"
    IP_DNS="$(getbootparam ip_dns)"
    IP_DOMAIN="$(getbootparam ip_domain)"
    IP_SEARCH="$(getbootparam ip_search)"
    if [ "$IP_V4DHCP" = "yes" ] || [ -z "${IP_V4ADDR}${IP_V6ADDR}" ]; then
      if ! checkbootparam "nodhcp"; then
        echo -n "${CRE}${BLUEITEM} Attempting DHCP on ${WHITE}${i}${NORMAL}... "
        if _f12 udhcpc -q -n -s /bin/udhcpc.script -i $i; then
          echo -n "done${CRE}"
        else
          echo -n "failed${CRE}"
        fi
      fi
    else
      if [ -n "$IP_V4ADDR" ]; then
        [ -z "$IP_V4NETMASK" ] && IP_V4NETMASK="255.255.255.0"
        ip -4 addr add "$IP_V4ADDR"/"$IP_V4NETMASK" "${i}"
      fi
    fi
    if [ -n "$IP_V6ADDR" ]; then
      ip -6 addr add "$IP_V6ADDR" dev "${i}"
    fi
  done
  if [ -n "$IP_V4GATEWAY" ]; then
    ip -4 route add default via "$IP_V4GATEWAY"
  fi
  if [ -n "$IP_V6GATEWAY" ]; then
    ip -6 route add default via "$IP_V6GATEWAY"
  fi
  if [ -n "$IP_DNS" ]; then
    : >/etc/resolv.conf
    arr=$(echo "$IP_DNS" | tr "," "\n")
    for i in $arr; do
      echo "nameserver $i" >>/etc/resolv.conf
    done
  fi
  if [ -n "$IP_SEARCH" ]; then
    arr=$(echo "$IP_SEARCH" | tr "," "\n")
    for i in $arr; do
      echo "search $i" >>/etc/resolv.conf
    done
  elif [ -n "$IP_DOMAIN" ]; then
    echo "domain $IP_DOMAIN"  >>/etc/resolv.conf
  fi

  echo -n "${CRE}${BLUEITEM} Mounting NFS point ${WHITE}${NFSROOT}${NORMAL}... "
  _f12 modprobe nfs
  _f12 modprobe nfsv${NFSVERS}
  if _f12 mount -t nfs -o ${ROOTWRITE},nfsvers=${NFSVERS},nolock ${NFSROOT} ${FINNIX_CDBASE}; then
    if [ -e "${FINNIX_CDBASE}$CDDISTID" ] && check_distid "${FINNIX_CDBASE}$CDDISTID" "$INITDISTIDS"; then
      echo -n "done${CRE}"
      FOUND_FINNIX="yes"
    else
      echo "${RED}failed${NORMAL}"
      _f12 umount ${FINNIX_CDBASE}
    fi
  else
    echo "${RED}failed${NORMAL}"
  fi

  while test -z "$FOUND_FINNIX"; do
    echo "${CRE}${REDITEM} Cannot find ${OS_NAME} media.  You're on your own."
    echo "${REDITEM} Giving you a shell, hopefully you can mount the media to ${WHITE}${FINNIX_CDBASE}${NORMAL}."
    echo "${REDITEM} If you can, exit the shell and startup will proceed as normal."
    rundebugshell
    if [ -e "${FINNIX_CDBASE}$CDDISTID" ] && check_distid "${FINNIX_CDBASE}$CDDISTID" "$INITDISTIDS"; then
      FOUND_FINNIX="yes"
    fi
  done

# NFS ELSE
else
  FINNIX_CDBASE="/tmp/cd_base"
  mkdir -p "$FINNIX_CDBASE"
  FINNIX_CDBASE_REMOUNT="/media/unknown/cd_base"

  # Search for CD device
  while test -z "$FOUND_FINNIX"; do
   mountblindly
   if test -z "$FOUND_FINNIX"; then
     for try in 1 2 3; do
       echo -n "${CRE}${YELLOWITEM} Waiting for devices to settle (${WHITE}try ${try}${NORMAL})... "
       sleep 5
       echo -n "${CRE}"
       mountblindly
       test -n "$FOUND_FINNIX" && break
     done
   fi

   if test -z "$FOUND_FINNIX"; then
     echo "${CRE}${REDITEM} Cannot find ${OS_NAME} media.  You're on your own."
     echo "${REDITEM} Giving you a shell, hopefully you can mount the media to ${WHITE}${FINNIX_CDBASE}${NORMAL}."
     echo "${REDITEM} If you can, exit the shell and startup will proceed as normal."
     rundebugshell
     if [ -e "${FINNIX_CDBASE}$CDDISTID" ] && check_distid "${FINNIX_CDBASE}$CDDISTID" "$INITDISTIDS"; then
       FOUND_FINNIX="yes"
     fi
   fi
  done

  [ "${FINNIX_DEBUG}" = "yes" ] && rundebugshell

  # If dist.id file exists, the user mounted it during emergency debug; don't try again.
  if [ ! -f "${FINNIX_CDBASE}${CDDISTID}" ]; then
    if [ "$FINNIX_FORENSIC" = "yes" ]; then
      mounttypes="-t ext2,iso9660,vfat,squashfs"
      if [ "$(blockdev --getro "$FINNIX_DEV")" = "0" ]; then
        blockdev --setro "$FINNIX_DEV"
      fi
    fi
    if [ -n "${FINNIX_FINDISO}" ]; then
      dispdev="$(basename "$FINNIX_DEV")"
      FINNIX_CDBASE="/media/findiso"
      FINNIX_CDBASE_REMOUNT="/media/findiso"
      REMOUNT_FINDISO_BACKING="$dispdev"
      mkdir -p "$FINNIX_CDBASE"
      mkdir -p "/media/${dispdev}"
      mount $mounttypes -o $ROOTWRITE "$FINNIX_DEV" "/media/${dispdev}"
      mount $mounttypes -o ro,loop "/media/$dispdev${FINNIX_FINDISO}" "${FINNIX_CDBASE}"
    else
      mount $mounttypes -o $ROOTWRITE "$FINNIX_DEV" "${FINNIX_CDBASE}"
      FINNIX_CDBASE_REMOUNT="/media/$dispdev"
    fi
  fi

# NFS END
fi

if [ -n "$TORAM" -a "$FINNIX_CDBASE" = "/media/ramdisk/cd_base" ]; then
  unset TORAM
fi

if [ -n "$TORAM" -o -n "$TESTCD" ]; then
  if [ ! -f "${FINNIX_CDBASE}/md5sums" ]; then
    echo "${YELLOWITEM} md5sums not found; ${WHITE}toram${NORMAL}/${WHITE}testcd${NORMAL} skipped"
    unset TORAM
    unset TESTCD
  fi
fi

if [ -n "$TORAM" -a -n "${FINNIX_CDBASE}" ]; then
  echo "${BLUEITEM} Copying ${OS_NAME} image to ramdisk, please be patient... "
  TORAM_FAILED=""
  TORAM_CDBASE="/media/ramdisk/cd_base"
  _f12 mkdir -p "$TORAM_CDBASE" || TORAM_FAILED="yes"
  for i in `awk '{print $2}' ${FINNIX_CDBASE}/md5sums`; do
    echo -n "${CRE}${BLUEITEM}   ${WHITE}$i${NORMAL}"
    _f12 mkdir -p "${TORAM_CDBASE}/$(dirname "$i")" || TORAM_FAILED="yes"
    _f12 cp -af "${FINNIX_CDBASE}/$i" "${TORAM_CDBASE}/$i" || TORAM_FAILED="yes"
  done
  _f12 mkdir -p ${TORAM_CDBASE}${FINNIX_DIR} || TORAM_FAILED="yes"
  _f12 cp -af ${FINNIX_CDBASE}/md5sums ${TORAM_CDBASE}/md5sums || TORAM_FAILED="yes"
  echo -n "${CRE}${ESC}[1A"

  if [ -n "$TORAM_FAILED" ]; then
    echo "${CRE}${REDITEM} Copying ${OS_NAME} image to ramdisk ${RED}FAILED${NORMAL}"
    echo "${YELLOWITEM} Falling back to CD mount"
    unset TORAM
    rm -rf "${TORAM_CDBASE}"
  else
    # Unmount the device and eject
    _f12 umount ${FINNIX_CDBASE}
    if [ "${FINNIX_NOEJECT}" = "no" ] && [ -n "${FINNIX_DEV}" ]; then
      case "$(basename ${FINNIX_DEV})" in
        sr*) _f12 eject "${FINNIX_DEV}";;
        scd*) _f12 eject "${FINNIX_DEV}";;
      esac
    fi
    FINNIX_CDBASE="${TORAM_CDBASE}"
    unset TORAM_CDBASE
    unset FINNIX_CDBASE_REMOUNT
    echo -n "${CRE}${BLUEITEM} Copying ${OS_NAME} image to ramdisk, please be patient... done${CRE}"
  fi
fi

if [ -n "$TESTCD" ]; then
  echo "${BLUEITEM} Checking CD data integrity, please be patient... "
  ( cd ${FINNIX_CDBASE}/ ; rm -f /tmp/md5sum.log ; ( md5sum -c ${FINNIX_CDBASE}/md5sums 2>&1 && touch /tmp/goodmd5 ) | tee /tmp/md5sum.log ) |
  while read testline; do
    echo -n "${CRE}${BLUEITEM}   ${WHITE}$testline${NORMAL}"
  done
  echo -n "${CRE}${ESC}[1A"
  if [ -f /tmp/goodmd5 ]; then
    rm -f /tmp/goodmd5 /tmp/md5sum.log
  else
    echo "${CRE}${REDITEM} Checking CD data integrity ${RED}FAILED${NORMAL}"
    echo "${REDITEM}  Checksum failed for these files:"
    egrep -v '(^md5sum:|OK$)' /tmp/md5sum.log
    TESTCD_FAILED="yes"
  fi
  if [ -n "$TESTCD_FAILED" ]; then
    echo "${REDITEM} ${RED}The CD test has failed.  This may be due to bad RAM, a bad CD burn,${NORMAL}"
    echo "${REDITEM} ${RED}or a bad ISO download.  Please verify that the ISO download was${NORMAL}"
    echo "${REDITEM} ${RED}successful, then try burning the CD again.${NORMAL}"
    echo -n "${WHITE}Hit return to contine, or press the reset button to quit.${NORMAL} "
    read a </dev/console
  else
    echo -n "${CRE}${BLUEITEM} Checking CD data integrity, please be patient... done${CRE}"
  fi
fi

if [ "$FINNIX_FORENSIC" = "yes" ]; then
  if ! [ -f /etc/forensic.ids ]; then
    echo "${REDITEM} Forensic SHA512 IDs not found on initrd!  Aborting."
    runemergencyshell
  fi

  # I'm not satisfied with the various filename support in this block.
  # It'll break on files in /finnix with spaces, extended characters, etc.
  for FILE in $(find ${FINNIX_CDBASE}/finnix -type f | sed 's,^'"${FINNIX_CDBASE}/finnix/"',,g'); do
    echo -n "${CRE}${BLUEITEM} Verifying files for forensic mode: ${WHITE}finnix/${FILE}${NORMAL}"
    FOUNDFILE=""
    SHA="$(sha512sum ${FINNIX_CDBASE}/finnix/$FILE | awk '{print $1}')"
    while read SHATEST FILETEST; do
      if [ "$FILETEST" = "$FILE" ]; then
        FOUNDFILE="yes"
        if ! [ "$SHATEST" = "$SHA" ]; then
          echo " ${RED}BAD SHA512${NORMAL}"
          runemergencyshell
        fi
      fi
    done </etc/forensic.ids
    if [ -z "$FOUNDFILE" ]; then
      echo " ${RED}UNKNOWN FILE${NORMAL}"
      runemergencyshell
    fi
  done
  echo -n "${CRE}"
fi

# FI INITRDROOT
fi

echo -n "${BLUEITEM} Creating unionfs overlay... "

# Figure out which CD arch we should use
while read UNAMEMT DISTARCHT DISTARCHFT; do
  [ -z "$UNAMEMT" ] && continue
  if [ "$ARCH" = "$UNAMEMT" ]; then
    if [ -f "${FINNIX_CDBASE}${FINNIX_DIR}/arch/${DISTARCHT}/root.img" ]; then
      FINNIX_CDARCHDIR="${FINNIX_DIR}/arch/${DISTARCHT}"
      FINNIX_CDINDEPDIR="${FINNIX_DIR}/arch/indep"
      FINNIX_DISTARCH="${DISTARCHT}"
      FINNIX_DISTARCH_FALLBACK="${DISTARCHFT}"
    elif [ -n "${DISTARCHFT}" -a -f "${FINNIX_CDBASE}${FINNIX_DIR}/arch/${DISTARCHFT}/root.img" ]; then
      FINNIX_CDARCHDIR="${FINNIX_DIR}/arch/${DISTARCHFT}"
      FINNIX_CDINDEPDIR="${FINNIX_DIR}/arch/indep"
      FINNIX_DISTARCH="${DISTARCHT}"
      FINNIX_DISTARCH_FALLBACK="${DISTARCHFT}"
    fi
  fi
done <<EOM
$(egrep -v '^#' "${FINNIX_CDBASE}${ARCHMAP}")
EOM

# If we don't have the correct arch directory yet, something
# went terribly wrong
if [ -z "${FINNIX_CDARCHDIR}" ]; then
  echo "${REDITEM} ${RED}Cannot find mapped arch directory!  Is the CD mastered correctly?${NORMAL}"
  runemergencyshell
fi

# Mount the compressed root image
FINNIX_ROOTIMG="${FINNIX_CDARCHDIR}/root.img"
mkdir -p /media/compressed_root
mount -n -o ro,loop "${FINNIX_CDBASE}$FINNIX_ROOTIMG" /media/compressed_root

# Begin building the unionfs mount line
UNION_LOWER="/media/compressed_root"

# Overlay support in /finnix/arch/indep/overlays on cdrom
# Add to unionfs mount line
OSRCDIR="${FINNIX_CDBASE}/${FINNIX_CDINDEPDIR}/overlays"
if [ -d "${OSRCDIR}" ]; then
  for i in `cd ${OSRCDIR}; ls -1`; do
   echo -n "${WHITE}$i${NORMAL} "
   if [ -d "${OSRCDIR}/$i" ]; then
     UNION_LOWER="${UNION_LOWER}:${OSRCDIR}/$i"
   else
     mkdir -p "/media/ramdisk/union_overlays/$i"
     mount -o ro,loop "${OSRCDIR}/$i" "/media/ramdisk/union_overlays/$i"
     UNION_LOWER="${UNION_LOWER}:/media/ramdisk/union_overlays/$i"
    fi
  done
fi

# Overlay support in /finnix/arch/ARCH/overlays on cdrom
# Add to unionfs mount line
OSRCDIR="${FINNIX_CDBASE}/${FINNIX_CDARCHDIR}/overlays"
if [ -d "${OSRCDIR}" ]; then
  for i in `cd ${OSRCDIR}; ls -1`; do
    echo -n "${WHITE}$i${NORMAL} "
    if [ -d "${OSRCDIR}/$i" ]; then
      UNION_LOWER="${UNION_LOWER}:${OSRCDIR}/$i"
    else
      mkdir -p "/media/ramdisk/union_overlays/$i"
      mount -o ro,loop "${OSRCDIR}/$i" "/media/ramdisk/union_overlays/$i"
      UNION_LOWER="${UNION_LOWER}:/media/ramdisk/union_overlays/$i"
    fi
  done
fi

# The actual unionfs mount
mkdir -p /media/ramdisk/union_writable
mkdir -p /media/ramdisk/union_work
UNION_UPPER="/media/ramdisk/union_writable"
UNION_WORK="/media/ramdisk/union_work"
mkdir -p /UNIONFS
if mount -t overlay unionfs "-olowerdir=${UNION_LOWER},upperdir=${UNION_UPPER},workdir=${UNION_WORK}" /UNIONFS; then
  echo -n "done${CRE}"
else
  echo ""
  echo "${RED}ERROR: CANNOT UNITE READ-ONLY MEDIA AND INITIAL RAMDISK!${NORMAL}"
  runemergencyshell
fi

# When udev is used, only a few files are needed to begin with
# /UNIONFS/dev may or may not exist at this point
_f12 mkdir -p /UNIONFS/dev
_f12 mknod -m 0666 /UNIONFS/dev/null c 1 3
_f12 mknod -m 0600 /UNIONFS/dev/console c 5 1

# We will need the busybox binaries during shutdown
mkdir -p /media/ramdisk/busybin
cp -a /bin/* /media/ramdisk/busybin/

# Set real root device
echo "0x100" > /proc/sys/kernel/real-root-dev

[ "${FINNIX_DEBUG}" = "yes" ] && rundebugshell

_f12 umount -l /sys
_f12 umount -l /proc
_f12 umount -l /dev

# Give control to the init process.
PATH=/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

# If the user really wants SELinux, let them.
# Otherwise, prevent init from trying to start it.
selinux_check="$(getbootparam selinux)"
if [ ! "${selinux_check}" = "1" ]; then
  export SELINUX_INIT=NO
fi

# Give a few things to the userland
mkdir -p /UNIONFS/run/finnix
cat >/UNIONFS/run/finnix/initrd.env <<EOM
FINNIX_DIR="${FINNIX_DIR}"
FINNIX_DISTARCH="${FINNIX_DISTARCH}"
FINNIX_DISTARCH_FALLBACK="${FINNIX_DISTARCH_FALLBACK}"
FINNIX_CDARCHDIR="${FINNIX_CDARCHDIR}"
FINNIX_ROOTIMG="${FINNIX_ROOTIMG}"
FINNIX_DEBUG="${FINNIX_DEBUG}"
FINNIX_NOEJECT="${FINNIX_NOEJECT}"
FINNIX_FORENSIC="${FINNIX_FORENSIC}"
FINNIX_XEN="${FINNIX_XEN}"
FINNIX_XENU="${FINNIX_XENU}"
FINNIX_XENU_OLD="${FINNIX_XENU_OLD}"
FINNIX_XENU_NEW="${FINNIX_XENU_NEW}"
FINNIX_UML="${FINNIX_UML}"
FINNIX_NFSBOOT="${FINNIX_NFSBOOT}"
FINNIX_DEV="${FINNIX_DEV}"
FINNIX_FINDISO="${FINNIX_FINDISO}"
EOM

# If udhcpc was used, copy the created resolv.conf to the final filesystem.
[ -f /etc/resolv.conf.udhcpc ] && cat /etc/resolv.conf.udhcpc >/UNIONFS/etc/resolv.conf

mkdir -p /UNIONFS/media/ramdisk
mount --move /media/ramdisk /UNIONFS/media/ramdisk

if [ -n "$FINNIX_CDBASE_REMOUNT" ]; then
  mkdir -p "/UNIONFS/${FINNIX_CDBASE_REMOUNT}"
  mount --move "${FINNIX_CDBASE}" "/UNIONFS/${FINNIX_CDBASE_REMOUNT}"
  FINNIX_CDBASE="${FINNIX_CDBASE_REMOUNT}"
  unset FINNIX_CDBASE_REMOUNT
fi

# If findiso was used, remount the backing drive within /UNIONFS
if [ -n "$REMOUNT_FINDISO_BACKING" ]; then
  mkdir -p "/UNIONFS/media/${REMOUNT_FINDISO_BACKING}"
  mount --move "/media/${REMOUNT_FINDISO_BACKING}" "/UNIONFS/media/${REMOUNT_FINDISO_BACKING}"
fi

ln -s "$FINNIX_CDBASE" "/UNIONFS/media/cd_base"

mkdir -p /UNIONFS/media/compressed_root
mount --move /media/compressed_root /UNIONFS/media/compressed_root

# Let's go!
cd /
if [ -n "${BOOTCHART}" ]; then
  exec switch_root /UNIONFS /sbin/bootchartd bootchart_init=$INIT </dev/console >/dev/console 2>&1
elif [ "${FINNIX_STRACE}" = "yes" ]; then
  exec switch_root /UNIONFS /sbin/finnix-strace-init $INIT </dev/console >/dev/console 2>&1
else
  exec switch_root /UNIONFS $INIT </dev/console >/dev/console 2>&1
fi
